package ui.appointments;

import app.alerts.Alerts;
import app.controllers.AppointmentController;
import app.controllers.CustomerController;
import domain.stores.Appointment.Appointment;
import domain.stores.Contact.Contact;
import domain.stores.User.User;
import domain.time.Time;
import javafx.collections.FXCollections;
import javafx.geometry.Insets;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import ui.contacts.ContactComboBox;
import ui.customers.CustomerComboBox;
import ui.users.UserComboBox;

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * AppointmentInfoForm contains the fields for adding or updating an Appointment.
 */
public class AppointmentInfoForm extends GridPane {
    private static final TextField appointmentIdField = new TextField();
    private static final TextField appointmentTitleField = new TextField();
    private static final TextField appointmentDescriptionField = new TextField();
    private static final TextField appointmentLocationField = new TextField();
    private static final ContactComboBox contactComboBox = new ContactComboBox();
    private static final TextField appointmentTypeField = new TextField();
    private static final Time businessStart = Time.fromLocalTime(LocalTime.of(8, 0), Time.EST);
    private static final Time businessEnd = Time.fromLocalTime(LocalTime.of(22, 0), Time.EST);
    private static final DatePicker startDatePicker = new DatePicker();
    private static final ComboBox<LocalTime> startTimePicker = new ComboBox<>();
    private static final DatePicker endDatePicker = new DatePicker();
    private static final ComboBox<LocalTime> endTimePicker = new ComboBox<>();
    private static final CustomerComboBox customerComboBox = new CustomerComboBox();
    private static final UserComboBox userComboBox = new UserComboBox();
    private static User currentUser = null;
    private static Appointment appointment = null;
    private Contact contact = null;


    /**
     * Constructs a new AppointmentInfoForm for use in the UI.
     */
    public AppointmentInfoForm(User currentUser) {
        AppointmentInfoForm.currentUser = currentUser;

        if (AppointmentInfoForm.appointment != null) {
            this.setInfoFromAppointment();
        } else {
            AppointmentInfoForm.appointment = new Appointment(AppointmentController.maxId() + 1);
        }

        Label appointmentId = new Label("ID (autogenerated)");
        this.add(appointmentId, 0, 0);
        appointmentIdField.setText(String.valueOf(appointment.getAppointmentId()));
        appointmentIdField.setDisable(true);
        this.add(appointmentIdField, 1, 0);

        Label appointmentName = new Label("Title");
        this.add(appointmentName, 0, 1);
        appointmentTitleField.setText(appointment.getTitle());
        this.add(appointmentTitleField, 1, 1);

        Label appointmentDescLabel = new Label("Description");
        this.add(appointmentDescLabel, 0, 2);
        appointmentDescriptionField.setText(appointment.getDescription());
        this.add(appointmentDescriptionField, 1, 2);

        Label appointmentLocationLabel = new Label("Location");
        this.add(appointmentLocationLabel, 0, 3);
        appointmentLocationField.setText(appointment.getLocation());
        this.add(appointmentLocationField, 1, 3);

        Label appointmentContactLabel = new Label("Contact");
        this.add(appointmentContactLabel, 0, 4);
        contactComboBox.setContact(this.contact);
        this.add(contactComboBox, 1, 4);

        Label appointmentTypeLabel = new Label("Type");
        this.add(appointmentTypeLabel, 0, 5);
        appointmentTypeField.setText(appointment.getType());
        this.add(appointmentTypeField, 1, 5);

        // ------------------------------------------------------
        // Date/Time pickers

        Label startDateLabel = new Label("Start Date");
        this.add(startDateLabel, 0, 6);
        startDatePicker.setValue(LocalDate.now());
        startDatePicker.setDayCellFactory(view -> new DateCell() {
            @Override
            public void updateItem(LocalDate item, boolean empty) {
                super.updateItem(item, empty);

                LocalDate now = LocalDate.from(new Time().withZone(Time.SystemT).getTime());

                if (!empty && item != null) {
                    Time t = Time.fromObject(item, Time.SystemT).withZone(Time.EST);
                    setDisable(!t.isWeekday() || item.isBefore(now));
                }
            }
        });

        this.add(startDatePicker, 1, 6);


        List<LocalTime> timeList = new ArrayList<>();
        for (int i = 0; i < 24; i++) {
            for (int j = 0; j < 4; j++) {
                LocalTime lt = LocalTime.of(i, j * 15);
                Time t = Time.fromLocalTime(lt, LocalDate.now(Time.SystemT), Time.SystemT);

                if (t.isInRange(businessStart, businessEnd)) {
                    timeList.add(lt);
                }
            }
        }
        startTimePicker.setItems(FXCollections.observableList(timeList));
        startTimePicker.getSelectionModel().select(
                Time.get(() -> appointment.getStart().withZone(Time.SystemT),
                        Time.fromLocalTime(timeList.get(0), Time.SystemT)).toLocalTime()
        );
        this.add(startTimePicker, 1, 7);

        Label endDateLabel = new Label("End Date");
        this.add(endDateLabel, 0, 8);
        endDatePicker.setDayCellFactory(view -> new DateCell() {
            @Override
            public void updateItem(LocalDate item, boolean empty) {
                super.updateItem(item, empty);

                if (!empty && item != null) {
                    Time t = Time.fromObject(item, Time.SystemT).withZone(Time.EST);
                    setDisable(!t.isWeekday() || item.isBefore(startDatePicker.getValue()));
                }
            }
        });

        endTimePicker.setItems(FXCollections.observableList(timeList));
        endTimePicker.getSelectionModel().select(
                Time.get(() -> appointment.getEnd().withZone(Time.SystemT),
                        Time.fromLocalTime(timeList.get(0), Time.SystemT)).toLocalTime()
        );
        this.add(endDatePicker, 1, 8);
        this.add(endTimePicker, 1, 9);

        // ------------------------------------------------------

        Label customerLabel = new Label("Customer");
        this.add(customerLabel, 0, 10);
        this.add(customerComboBox, 1, 10);
        if (appointment.getCustomerId() != 0) {
            customerComboBox.getItems().forEach(c -> {
                if (c.getCustomerId() == appointment.getAppointmentId()) {
                   customerComboBox.setCustomer(c);
                }
            });
        }

        Label userLabel = new Label("User");
        this.add(userLabel, 0, 11);
        this.add(userComboBox, 1, 11);
        if (appointment.getUserId() != 0) {
            userComboBox.getItems().forEach(u -> {
                if (u.getUserId() == appointment.getUserId()) {
                   userComboBox.setUser(u);
                }
            });
        }


        this.setPadding(new Insets(10, 10, 10, 10));
        this.setHgap(20);
        this.setVgap(10);
    }

    /**
     * sets the appointment to populate the form with.
     *
     * @param appointment the appointment to use
     */
    public static boolean setAppointment(Appointment appointment) {
        if (appointment.getStart().getTime().isBefore(ZonedDateTime.now())) {
            Alerts.Error("You cannot edit past appointments.");
            return false;
        }
        AppointmentInfoForm.appointment = appointment;
        return true;
    }

    /**
     * clears the appointmentView to prevent data carryover.
     */
    public static void clearAppointmentView() {
        AppointmentInfoForm.appointment = null;
        AppointmentInfoForm.startTimePicker.getSelectionModel().clearSelection();
        AppointmentInfoForm.endDatePicker.getEditor().clear();
        AppointmentInfoForm.endTimePicker.getSelectionModel().clearSelection();
        AppointmentInfoForm.customerComboBox.getSelectionModel().clearSelection();
        AppointmentInfoForm.userComboBox.getSelectionModel().clearSelection();
    }

    /**
     * @return the Appointment populated with the information stored in the form.
     */
    public static Appointment getAppointmentFromForm() {
        Appointment a = new Appointment(Integer.parseInt(appointmentIdField.getText()));

        // ------------------------------------------------------
        // Input validation

        if (contactComboBox.getSelectionModel().getSelectedItem() == null) {
            Alerts.Warning("No Contact Selected");
            return null;
        }
        if (customerComboBox.getSelectionModel().getSelectedItem() == null) {
            Alerts.Warning("No Customer Selected");
            return null;
        }
        if (userComboBox.getSelectionModel().getSelectedItem() == null) {
            Alerts.Warning("No User Selected");
            return null;
        }
        if (startDatePicker.getValue() == null) {
            Alerts.Warning("No Start Date Selected");
            return null;
        }
        if (startTimePicker.getValue() == null) {
            Alerts.Warning("No Start Time Selected");
            return null;
        }
        if (endDatePicker.getValue() == null) {
            Alerts.Warning("No End Date Selected");
            return null;
        }
        if (endTimePicker.getValue() == null) {
            Alerts.Warning("No End Time Selected");
            return null;
        }

        Time start = Time.fromLocalTime(startTimePicker.getValue(), startDatePicker.getValue(), Time.SystemT);
        Time end = Time.fromLocalTime(endTimePicker.getValue(), endDatePicker.getValue(), Time.SystemT);
        if (start.getTime().isBefore(ZonedDateTime.now())) {
            Alerts.Warning("Start Time cannot be in the past.");
            return null;
        }
        if (start.getTime().isAfter(end.getTime())) {
            Alerts.Warning("Start Time is after End Time");
            return null;
        }
        if (start.getTime().isEqual(end.getTime())) {
            Alerts.Warning("Start Time is the same as End Time");
            return null;
        }

        List<Appointment> appointments = AppointmentController.getAppointments();
        for (Appointment appt : appointments) {
            if (start.isInRange(appt.getStart(), appt.getEnd()) && a.getAppointmentId() != appt.getAppointmentId()) {
                Alerts.Warning("Appointment start time overlaps with Appointment ID " + appt.getAppointmentId() + " Title " + appt.getTitle());
                return null;
            }

            if (end.isInRange(appt.getStart(), appt.getEnd()) && a.getAppointmentId() != appt.getAppointmentId()) {
                Alerts.Warning("Appointment end time overlaps with Appointment ID " + appt.getAppointmentId() + " Title " + appt.getTitle());
                return null;
            }
        }

        // ------------------------------------------------------
        // Set defaults

        if (a.getCreateDate() != null) {
            a.setCreateDate(a.getCreateDate());
        } else {
            a.setCreateDate(new Time().withZone(Time.UTC));
        }
        if (a.getCreatedBy() != null) {
            a.setCreatedBy(a.getCreatedBy());
        } else {
            a.setCreatedBy(currentUser.getUserName());
        }
        if (a.getLastUpdate() != null) {
            a.setLastUpdate(a.getLastUpdate());
        } else {
            a.setLastUpdate(new Time().withZone(Time.UTC));
        }
        a.setTitle(appointmentTitleField.getText());
        a.setDescription(appointmentDescriptionField.getText());
        a.setLocation(appointmentLocationField.getText());
        a.setType(appointmentTypeField.getText());
        a.setStart(start);
        a.setEnd(end);
        a.setCustomerId(customerComboBox.getValue().getCustomerId());
        a.setContactId(contactComboBox.getValue().getContactId());
        a.setUserId(userComboBox.getValue().getUserId());
        a.setLastUpdatedBy(currentUser.getUserName());
        return a;
    }

    /**
     * Populates the form with data from the appointment field for the class.
     */
    private void setInfoFromAppointment() {
        this.contact = new Contact(AppointmentInfoForm.appointment.getContactId());
    }
}
