package ui.appointments;

import app.alerts.Alerts;
import app.controllers.AppointmentController;
import domain.Appointment;
import domain.Contact;
import domain.User;
import domain.time.Time;
import javafx.collections.FXCollections;
import javafx.geometry.Insets;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.RowConstraints;
import ui.contacts.ContactComboBox;

import java.util.ArrayList;
import java.util.List;

/**
 * AppointmentInfoForm contains the fields for adding or updating an Appointment.
 */
public class AppointmentInfoForm extends GridPane {
    private static User currentUser = null;

    private static Appointment appointment = null;
    private Contact contact = null;

    private static final TextField appointmentIdField = new TextField();
    private static final TextField appointmentTitleField = new TextField();
    private static final TextField appointmentDescriptionField = new TextField();
    private static final TextField appointmentLocationField = new TextField();
    private static final ContactComboBox contactComboBox = new ContactComboBox();
    private static final TextField appointmentTypeField = new TextField();
    private static final AppointmentDatePicker startDatePicker = new AppointmentDatePicker();
    private static final AppointmentTimePicker startTimePicker = new AppointmentTimePicker(startDatePicker);
    private static final AppointmentDatePicker endDatePicker = new AppointmentDatePicker();
    private static final AppointmentTimePicker endTimePicker = new AppointmentTimePicker(endDatePicker);
    //private static final ComboBox<Customer> customerComboBox = new ComboBox<>();
    // TODO: Add the user controller.
    //private static final UserComboBox userComboBox = new UserComboBox();


    /**
     * Constructs a new AppointmentInfoForm for use in the UI.
     */
    public AppointmentInfoForm(User currentUser) {
        AppointmentInfoForm.currentUser = currentUser;

        if (AppointmentInfoForm.appointment != null) {
            this.setInfoFromAppointment();
        } else {
            AppointmentInfoForm.appointment = new Appointment(AppointmentController.maxId() + 1);
        }

        Label appointmentId = new Label("ID (autogenerated)");
        this.add(appointmentId, 0, 0);
        appointmentIdField.setText(String.valueOf(appointment.getAppointmentId()));
        appointmentIdField.setDisable(true);
        this.add(appointmentIdField, 1, 0);

        Label appointmentName = new Label("Title");
        this.add(appointmentName, 0, 1);
        appointmentTitleField.setText(appointment.getTitle());
        this.add(appointmentTitleField, 1, 1);

        Label appointmentDescLabel = new Label("Description");
        this.add(appointmentDescLabel, 0, 2);
        appointmentDescriptionField.setText(appointment.getDescription());
        this.add(appointmentDescriptionField, 1, 2);

        Label appointmentLocationLabel = new Label("Location");
        this.add(appointmentLocationLabel, 0, 3);
        appointmentLocationField.setText(appointment.getLocation());
        this.add(appointmentLocationField, 1, 3);

        Label appointmentContactLabel = new Label("Contact");
        this.add(appointmentContactLabel, 0, 4);
        contactComboBox.setContact(this.contact);
        this.add(contactComboBox, 1, 4);

        Label appointmentTypeLabel = new Label("Type");
        this.add(appointmentTypeLabel, 0, 5);
        appointmentTypeField.setText(appointment.getType());
        this.add(appointmentTypeField, 1, 5);

        Label startDateLabel = new Label("Start Date");
        this.add(startDateLabel, 0, 6);
        this.add(startDatePicker, 1, 6);
        this.add(startTimePicker, 1, 7);

        Label endDateLabel = new Label("End Date");
        this.add(endDateLabel, 0, 8);
        this.add(endDatePicker, 1, 8);
        this.add(endTimePicker, 1, 9);


        this.setPadding(new Insets(10, 10, 10, 10));
        this.setHgap(20);
        this.setVgap(10);
    }

    /**
     * sets the appointment to populate the form with.
     *
     * @param appointment the appointment to use
     */
    public static void setAppointment(Appointment appointment) {
        AppointmentInfoForm.appointment = appointment;
    }

    /**
     * clears the appointmentView to prevent data carryover.
     */
    public static void clearAppointmentView() {
        AppointmentInfoForm.appointment = null;
    }

    /**
     * Populates the form with data from the appointment field for the class.
     */
    private void setInfoFromAppointment() {
        this.contact = new Contact(AppointmentInfoForm.appointment.getContactId());
    }

    /**
     * @return the Appointment populated with the information stored in the form.
     */
    public static Appointment getAppointmentFromForm() {
        Appointment a = new Appointment(Integer.parseInt(appointmentIdField.getText()));

        // ------------------------------------------------------
        // Input validation

        if (contactComboBox.getSelectionModel().getSelectedItem() == null) {
            Alerts.Warning("No Contact Selected");
            return null;
        }
        if (startDatePicker.getValue() == null) {
            Alerts.Warning("No Start Date Selected");
            return null;
        }
        if(startTimePicker.getValue() == null) {
            Alerts.Warning("No Start Time Selected");
            return null;
        }
        if (endDatePicker.getValue() == null) {
            Alerts.Warning("No End Date Selected");
            return null;
        }
        if(endTimePicker.getValue() == null) {
            Alerts.Warning("No End Time Selected");
            return null;
        }

        // ------------------------------------------------------
        // Set defaults

        if (a.getCreateDate() != null) {
            a.setCreateDate(a.getCreateDate());
        } else {
            a.setCreateDate(new Time());
        }
        if (a.getCreatedBy() != null) {
            a.setCreatedBy(a.getCreatedBy());
        } else {
            a.setCreatedBy(currentUser.getUserName());
        }
        if (a.getLastUpdate() != null) {
            a.setLastUpdate(a.getLastUpdate());
        } else {
            a.setLastUpdate(new Time());
        }
        a.setTitle(appointmentTitleField.getText());
        a.setDescription(appointmentDescriptionField.getText());
        a.setLocation(appointmentLocationField.getText());
        a.setType(appointmentTypeField.getText());
        a.setLastUpdatedBy(currentUser.getUserName());
        return a;
    }
}
