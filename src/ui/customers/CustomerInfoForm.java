package ui.customers;

import app.alerts.Alerts;
import app.controllers.CustomerController;
import domain.*;
import domain.time.Time;
import javafx.geometry.Insets;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import ui.countries.CountryComboBox;
import ui.divisions.DivisionComboBox;

/**
 * CustomerInfoForm contains the fields for adding or updating a Customer.
 */
public class CustomerInfoForm extends GridPane {
    private static User currentUser = null;

    private static Customer customer = null;
    private Country country = null;
    private FirstLevelDivision division = null;

    private static CustomerView view = null;

    private static final TextField customerIdField = new TextField();
    private static final TextField customerNameField = new TextField();
    private static final TextField customerPhoneField = new TextField();
    private static final TextField customerAddressField = new TextField();
    private static final TextField customerPostalCodeField = new TextField();
    private static final CountryComboBox countryComboBox = new CountryComboBox();
    private static final DivisionComboBox firstLevelDivisionComboBox = new DivisionComboBox(countryComboBox);


    /**
     * Constructs a new CustomerInfoForm for use in the UI.
     */
    public CustomerInfoForm(User currentUser) {
        CustomerInfoForm.currentUser = currentUser;

        if (CustomerInfoForm.view != null) {
            this.setInfoFromCustomerView();
        } else {
            CustomerInfoForm.customer = new Customer(CustomerController.maxId() + 1);
        }

        Label customerId = new Label("ID (autogenerated)");
        this.add(customerId, 0, 0);
        customerIdField.setText(String.valueOf(customer.getCustomerId()));
        customerIdField.setDisable(true);
        this.add(customerIdField, 1, 0);

        Label customerName = new Label("Name");
        this.add(customerName, 0, 1);
        customerNameField.setText(customer.getName());
        this.add(customerNameField, 1, 1);

        Label customerPhone = new Label("Phone Number");
        this.add(customerPhone, 0, 2);
        customerPhoneField.setText(customer.getPhone());
        this.add(customerPhoneField, 1, 2);

        Label customerAddress = new Label("Address");
        this.add(customerAddress, 0, 3);
        customerAddressField.setText(customer.getAddress());
        this.add(customerAddressField, 1, 3);

        Label customerPostalCode = new Label("Postal Code");
        this.add(customerPostalCode, 0, 4);
        customerPostalCodeField.setText(customer.getPostalCode());
        this.add(customerPostalCodeField, 1, 4);

        Label countryLabel = new Label("Country");
        this.add(countryLabel, 0, 5);
        countryComboBox.setCountry(this.country);
        this.add(countryComboBox, 1, 5);

        Label firstLevelDivision = new Label("First Level Division");
        this.add(firstLevelDivision, 0, 6);
        firstLevelDivisionComboBox.setDivision(division);
        this.add(firstLevelDivisionComboBox, 1, 6);

        this.setPadding(new Insets(10, 10, 10, 10));
        this.setHgap(10);
        this.setVgap(10);
    }

    /**
     * sets the customerView to populate the form with.
     *
     * @param view the view to use
     */
    public static void setCustomerView(CustomerView view) {
        CustomerInfoForm.view = view;
    }

    /**
     * clears the customerView to prevent data carryover.
     */
    public static void clearCustomerView() {
        CustomerInfoForm.view = null;
    }

    /**
     * Populates the form with data from the CustomerView.
     */
    private void setInfoFromCustomerView() {
        customer = new Customer(
                CustomerInfoForm.view.getCustomerId(),
                CustomerInfoForm.view.getCustomerName(),
                CustomerInfoForm.view.getPhone(),
                CustomerInfoForm.view.getAddress(),
                CustomerInfoForm.view.getPostalCode(),
                CustomerInfoForm.view.getCreatedBy(),
                CustomerInfoForm.view.getLastUpdatedBy(),
                CustomerInfoForm.view.getCreateDate(),
                CustomerInfoForm.view.getLastUpdate()
        );

        this.country = new Country(
                CustomerInfoForm.view.getCountryId(),
                CustomerInfoForm.view.getCountry()
        );

        this.division = new FirstLevelDivision(
                CustomerInfoForm.view.getDivisionId(),
                CustomerInfoForm.view.getDivisionName()
        );
    }

    /**
     * @return the Customer populated with the information stored in the form.
     */
    public static Customer getCustomerFromForm() {
        Customer c = new Customer(Integer.parseInt(customerIdField.getText()));
        if (countryComboBox.getSelectionModel().getSelectedItem() == null) {
            Alerts.Warning("No Country Selected");
            return null;
        }
        if (firstLevelDivisionComboBox.getSelectionModel().getSelectedItem() != null) {
            c.setDivisionId(firstLevelDivisionComboBox.getValue().getId());
        } else {
            Alerts.Warning("No First Level Division Selected");
            return null;
        }
        if (c.getCreatedBy() != null) {
            c.setCreatedBy(c.getCreatedBy());
        } else {
            c.setCreatedBy(currentUser.getUserName());
        }
        if (c.getCreateDate() != null) {
            c.setCreateDate(c.getCreateDate());
        } else {
            c.setCreateDate(new Time());
        }
        if (c.getLastUpdate() != null) {
            c.setLastUpdate(c.getLastUpdate());
        } else {
            c.setLastUpdate(new Time());
        }
        c.setName(customerNameField.getText());
        c.setPhone(customerPhoneField.getText());
        c.setAddress(customerAddressField.getText());
        c.setPostalCode(customerPostalCodeField.getText());
        c.setLastUpdateBy(currentUser.getUserName());
        return c;
    }
}
